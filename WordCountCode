Mapper:

package org.myorg;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable> 
{   
    private final static IntWritable one = new IntWritable(1); 
    private Text word = new Text();
    
    @Override
    public void map(LongWritable key, Text value, Context context) 
            throws IOException, InterruptedException 
    {
        String line = value.toString();
        StringTokenizer tokenizer = new StringTokenizer(line);
        while (tokenizer.hasMoreTokens()) 
        {
            word.set(tokenizer.nextToken());
            context.write(word, one);
        }
    }
}

        
    

Reducer:

package org.myorg;

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class WordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable> 
{
    @Override
    public void reduce(Text key, Iterable<IntWritable> values, Context context)
            throws IOException, InterruptedException 
    {
        int sum = 0;
        for (IntWritable value : values) 
        {
            sum += value.get();
        }
        context.write(key, new IntWritable(sum));
    }
}



Driver:
package org.myorg;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.fs.FileSystem;


public class WordCount 
{
		public static void main(String[] args) throws Exception 
    {					
        Configuration conf = new Configuration();
        if (args.length != 3) 
        {
            System.err.println("Usage: WordCount<input path><output path>");
            System.exit(-1);
        }

        Job job;
        job=Job.getInstance(conf, "Word Count");
        job.setJarByClass(WordCount.class);

        FileInputFormat.addInputPath(job, new Path(args[1]));
        FileOutputFormat.setOutputPath(job, new Path(args[2]));

        job.setMapperClass(WordCountMapper.class);  
    
        job.setReducerClass(WordCountReducer.class);
        job.setCombinerClass(WordCountReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileSystem hdfs = FileSystem.get(conf);
        Path outputDir = new Path(args[2]);
        if (hdfs.exists(outputDir))
            hdfs.delete(outputDir, true);

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}


